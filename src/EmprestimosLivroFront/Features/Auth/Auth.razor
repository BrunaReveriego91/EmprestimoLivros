@page "/login"

@using EmprestimosLivroFront.Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Blazored.LocalStorage

@inject AuthenticationService AuthAPI
@attribute [AllowAnonymous]

<MudGrid>

    <AuthorizeView>
        <Authorized>
            <MudAlert Severity="Severity.Info">Oi, @context.User.Identity.Name . Você já está conectado no sistema!</MudAlert>
        </Authorized>
    </AuthorizeView>

    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField T="string" Label="Usuário" 
                    Required="true" RequiredError="É obrigatório preencher o usuário!" 
                    @bind-Value=usuario/>               
                <MudTextField T="string" 
                    Label="Senha" HelperText="Preencha a sua senha"
                    InputType="InputType.Password" Required="true" RequiredError="É obrigatório preencher a senha!"
                    @bind-Value=senha />
            </MudForm>
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" OnClick="@(() => Autenticar())">Login</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DropShadow="false" OnClick="@(()=>form.ResetAsync())" Class="mx-2">Cadastrar</MudButton>            
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
            @foreach (var error in errors)
            {
                <MudText Color="@Color.Error">@error</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>


@code {
    private bool success;
    private string[] errors = { };
    private string usuario { get; set; } = string.Empty;
    private string senha { get; set; } = string.Empty;
    private MudForm form;
    private ILocalStorageService localStorage;

    private async Task Autenticar()
    {
        var formValidation = form.Validate();
        if (formValidation.IsCompletedSuccessfully)
        {
            await AuthAPI.AutenticarAsync(usuario, senha);
        }
    }
}